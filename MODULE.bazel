"""
All new bazel deps should be brought in with MODULE.bazel (aka bzlmod).
For now, internal deps e.g. shared-tools are brought in with WORKSPACE.
"""

module(name = "python_sfdc_bazel")

mirror_path = "https://rpm.repo.local.sfdc.net/artifactory/strata-blobs/sfdc-bazel"

docker_registry = "docker.repo.local.sfdc.net"

# direct dependencies
# python deps
bazel_dep(name = "aspect_rules_py", version = "1.2.1")
bazel_dep(name = "rules_python", version = "1.1.0")

#sonar qube
bazel_dep(name = "bazel_sonarqube", version = "1.0.2")

# gazelle deps
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.1.0")
bazel_dep(name = "gazelle", repo_name = "bazel_gazelle", version = "0.41.0")

# docker related deps
bazel_dep(name = "rules_oci", version = "2.2.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.11.0")
bazel_dep(name = "container_structure_test", version = "1.19.1")

# transitive dependencies that require configuration
bazel_dep(name = "rules_go", repo_name = "io_bazel_rules_go", version = "0.52.0")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "rhel9_base",
    # With bzlmod, the "image" field replaces "registry" & "repository".
    # However, we're keeping them here (commented out) to satisfy shared-tools (deploy:query).
    # They are only used there for writing to deployed.properties but given that we don't use that anymore, we could remove that constraint.
    # registry = docker_registry,
    # repository = "sfci/services/shared-repo-base-image/shared-repo-base-image-rhel9"
    # this is the digest for the multi-arch, you can see the digests with:
    # docker buildx imagetools inspect docker.repo.local.sfdc.net/sfci/services/shared-repo-base-image/shared-repo-base-image-rhel9:158-sfdc_rhel9_78
    digest = "sha256:f682aa9ffde94a69cf3b3d49cc44ffaac58c3f99f3f43800db5503774c1a2fee",
    image = docker_registry + "/sfci/services/shared-repo-base-image/shared-repo-base-image-rhel9",
    platforms = [
        "linux/arm64",
        "linux/amd64",
    ],
    reproducible = True,
    # Tag is present to help with semantic tracking when tools like "Renovate" are used.
    # However, digest is still the source-of-truth wrt reproducability.
    # https://github.com/bazel-contrib/rules_oci/issues/391
    tag = "158-sfdc_rhel9_78",
)

use_repo(oci, "rhel9_base", "rhel9_base_linux_amd64", "rhel9_base_linux_arm64")

# python toolchain configuration
python_version = "3.11.10"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# these are sourced from:
# https://github.com/indygreg/python-build-standalone/releases
# based on the following, these are approved:
# https://gus.lightning.force.com/lightning/r/ADM_Third_Party_Software__c/a0qEE00000086oDYAQ/view,
# https://salesforce-internal.slack.com/archives/C9JDPQLDA/p1715785698097429?thread_ts=1715782669.227839&cid=C9JDPQLDA
python.single_version_override(
    python_version = python_version,
    sha256 = {
        "aarch64-apple-darwin": "ecdc9c042b8f97bff211fcf9425bc51c96acd4037df1565964e89816f2c9564d",
        "aarch64-unknown-linux-gnu": "320635e957e13d2e10d70a3031563d032fae9e40e60e5ec32bc353643fae1335",
        "x86_64-apple-darwin": "a618c086e0514f681523947e2b66a4dc0c6560f91c36faa072fa6787455df9ea",
        "x86_64-unknown-linux-gnu": "ff121f14ed113c9da83a45f76c3cf41976fb4419fe406d5cc7066765761c6a4e",
    },
    urls = [
        # The format of this url is important i.e. the /cpython/<version>/ part.
        # https://github.com/bazelbuild/rules_python/issues/1800
        "https://rpm.repo.local.sfdc.net/artifactory/strata-blobs/sfdc-bazel/cpython/20241008/cpython-{python_version}+20241008-{platform}-{build}.tar.gz",
        "https://github.com/indygreg/python-build-standalone/releases/download/20241008/cpython-{python_version}+20241008-{platform}-{build}.tar.gz",
    ],
)

python.toolchain(
    configure_coverage_tool = True,
    # https://github.com/bazelbuild/rules_python/issues/1169
    ignore_root_user_error = True,
    python_version = python_version,
)

use_repo(python, "python_3_11_10")

# python third party dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "pip",
    python_version = python_version,
    requirements_lock = "//:requirements_lock.txt",
)

use_repo(pip, "pip")

# custom configurations for transitives

# configure custom golang toolchain (required for gazelle transitively)
go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(
    name = "go_sdk",
    sdks = {
        # these are mirrored internally as described by:
        #  https://git.soma.salesforce.com/services/sfdc-bazel/tree/main/tools/mirrordeps#manual-mirroring
        "darwin_arm64": ("go1.22.8.darwin-arm64.tar.gz", "725bd8491bc302af9e7188b259db2f14dae6be4fb4f31965be4f76c9af84ff45"),
        "darwin_amd64": ("go1.22.8.darwin-amd64.tar.gz", "ef0f7c1da5c8ac1eed0361381591a55effc90f9ca63b12cfd319f3f8ee113c12"),
        "linux_amd64": ("go1.22.8.linux-amd64.tar.gz", "5f467d29fc67c7ae6468cb6ad5b047a274bae8180cac5e0b7ddbfeba3e47e18f"),
        "linux_arm64": ("go1.22.8.linux-arm64.tar.gz", "5c616b32dab04bb8c4c8700478381daea0174dc70083e4026321163879278a4a"),
    },
    urls = [
        mirror_path + "/gosdk/{}",
        "https://dl.google.com/go/{}",
    ],
    version = "1.22.8",
)

use_repo(go_sdk, "go_sdk")
